name: Comprehensive Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday

jobs:
  # Advanced Security Scanning
  advanced-security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # Code Quality Metrics
  code-metrics:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Calculate code complexity
        run: |
          npx eslint src/ --format json > eslint-report.json || true
        continue-on-error: true

      - name: Check code duplication
        run: npx jscpd src/ --min-lines 5 --min-tokens 50 || true
        continue-on-error: true

      - name: Generate complexity report
        run: |
          echo "## Code Complexity Report" > complexity-report.md
          echo "Generated on $(date)" >> complexity-report.md
        continue-on-error: true

      - name: Upload code metrics
        uses: actions/upload-artifact@v4
        with:
          name: code-metrics
          path: |
            eslint-report.json
            complexity-report.md

  # Performance Testing
  performance-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          SKIP_ENV_VALIDATION: true

      - name: Start application
        run: npm run start &
        env:
          PORT: 3000

      - name: Wait for app to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
        continue-on-error: true

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:3000
            http://localhost:3000/dashboard
          uploadArtifacts: true
          temporaryPublicStorage: true
        continue-on-error: true

  # Bundle Size Analysis
  bundle-analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build with bundle analysis
        run: ANALYZE=true npm run build || npm run build
        env:
          SKIP_ENV_VALIDATION: true

      - name: Check bundle sizes
        run: |
          echo "## Bundle Size Report" > bundle-report.md
          du -sh .next/static/* >> bundle-report.md || echo "No static files" >> bundle-report.md

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: |
            .next/analyze/
            bundle-report.md

  # API Contract Testing
  api-contract:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate API documentation
        run: |
          echo "Generating API documentation..."
          # Add your API doc generation here
        continue-on-error: true

      - name: Validate OpenAPI spec
        run: |
          echo "Validating OpenAPI specification..."
          # Add OpenAPI validation here
        continue-on-error: true

  # Database Schema Validation
  database-validation:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate Prisma schema
        run: npx prisma validate

      - name: Check for schema drift
        run: |
          npx prisma generate
          npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/testdb

      - name: Generate ERD
        run: |
          echo "Generating Entity Relationship Diagram..."
          npx prisma-erd-generator || echo "ERD generation skipped"
        continue-on-error: true

      - name: Test database seeding
        run: npm run prisma:seed || echo "Seeding not configured"
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/testdb
        continue-on-error: true

  # Accessibility Audit
  accessibility-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Build application
        run: npm run build
        env:
          SKIP_ENV_VALIDATION: true

      - name: Run accessibility tests
        run: npm run test:a11y || echo "A11y tests need setup"
        continue-on-error: true

      - name: Run axe-core checks
        run: |
          echo "Running axe-core accessibility checks..."
        continue-on-error: true

  # SEO Validation
  seo-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check robots.txt
        run: test -f public/robots.txt && echo "robots.txt found" || echo "robots.txt missing"

      - name: Check sitemap
        run: |
          echo "Validating sitemap configuration..."
          # Add sitemap validation here

      - name: Check meta tags
        run: |
          echo "Checking meta tags and Open Graph data..."
          grep -r "og:" src/app/ || echo "No OG tags found"

  # Documentation Check
  documentation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Check README
        run: test -f README.md && wc -l README.md

      - name: Check CONTRIBUTING guide
        run: test -f CONTRIBUTING.md && echo "CONTRIBUTING.md exists"

      - name: Check for inline documentation
        run: |
          echo "Checking inline documentation..."
          grep -r "/**" src/ | wc -l || echo "No JSDoc found"

      - name: Validate markdown links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
        continue-on-error: true

  # Environment Configuration Check
  env-config:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Check for .env.example
        run: test -f .env.example && echo ".env.example found"

      - name: Validate environment variables
        run: |
          echo "Checking required environment variables..."
          grep -v '^#' .env.example | grep '=' || true

      - name: Check for sensitive data
        run: |
          echo "Scanning for accidentally committed secrets..."
          ! grep -r "password\|secret\|api_key" .env.* 2>/dev/null || echo "Warning: potential secrets found"

  # License Compliance
  license-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check licenses
        run: npx license-checker --summary --onlyAllow "MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC" || true
        continue-on-error: true

      - name: Generate license report
        run: npx license-checker --csv > licenses.csv || true
        continue-on-error: true

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.csv
        if: always()

  # Notification on completion
  notify-completion:
    runs-on: ubuntu-latest
    needs: [advanced-security, code-metrics, performance-tests, bundle-analysis, database-validation]
    if: always()
    steps:
      - name: Check job statuses
        run: |
          echo "Comprehensive checks completed!"
          echo "Review the artifacts and reports generated."
